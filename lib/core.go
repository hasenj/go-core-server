package core_server

import (
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"os/exec"
	"syscall"
)

// port used by proxy server to communicate with target servers
const PORT = 40608

// helper functions for app servers that don't swap themselves in
func AnnounceForwardTarget(domain string, port int) {
	log.Println("Announcing", domain, port)
	err := SendCommand(fmt.Sprintf("add %s %d", domain, port))
	if err != nil {
		log.Println("Error Announcing", domain, err)
	}
}

func SendCommand(cmd string) error {
	var udpAddress = net.UDPAddr{Port: PORT}
	conn, err := net.DialUDP("udp", nil, &udpAddress)
	if err != nil {
		return err
	}
	defer conn.Close()
	_, err = io.WriteString(conn, cmd)
	return err
}

// DetachFromParentProcess detaches a process from its parent process by
// creating a new session and becoming the session leader. This will exit the
// current process if it's not the session leader, so you should it as early as
// possible.
//
// Generated by ChatGPT-4o
func DetachFromParentProcess() {
	if os.Getppid() != 1 {
		fmt.Println(os.Args[0])
		cmd := exec.Command(os.Args[0], os.Args[1:]...)
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr
		cmd.Stdin = os.Stdin
		cmd.SysProcAttr = &syscall.SysProcAttr{
			Setsid: true,
		}
		err := cmd.Start()
		if err != nil {
			panic(err)
		}
		os.Exit(0)
	}
}
